#include <SPI.h>
#include <MFRC522.h>

#define SS_PIN 10
#define RST_PIN 9

MFRC522 rfid(SS_PIN, RST_PIN); // Instance of the class

MFRC522::MIFARE_Key key; 

// Init array that will store new NUID 
byte nuidPICC[4];
byte petnumber1[4];
byte petnumber2[4];
int x=1;
int y=0;
void setup() { 
   Serial.begin(9600);
  SPI.begin(); // Init SPI bus
  rfid.PCD_Init(); // Init MFRC522 
pinMode(7,OUTPUT);
pinMode(3,OUTPUT);
pinMode(4,OUTPUT);
pinMode(5,OUTPUT);
Serial.print(F("please scan the first tag "));
Serial.println();
}

    
void loop() {
while(x==1){

  if (! rfid.PICC_IsNewCardPresent())
  return;
  // Verify if the NUID has been readed
  if ( ! rfid.PICC_ReadCardSerial())
    return;
    // Store NUID into nuidPICC array
    for (byte i = 0; i < 4; i++) {
      petnumber1[i] = rfid.uid.uidByte[i];
    }
    
 Serial.println(F("scan x done")); 
  digitalWrite(4,HIGH);
    delay(1000);
    digitalWrite(4,LOW);
 x=0;
}
while(y==1){

  if (! rfid.PICC_IsNewCardPresent())
  return;
  // Verify if the NUID has been readed
  if ( ! rfid.PICC_ReadCardSerial())
    return;
    // Store NUID into nuidPICC array
    for (byte i = 0; i < 4; i++) {
      petnumber2[i] = rfid.uid.uidByte[i];
    }
   
    Serial.println(F("scan y done"));
     digitalWrite(4,HIGH);
    delay(1000);
    digitalWrite(4,LOW);
 y=0;
}
  // Reset the loop if no new card present on the sensor/reader. This saves the entire process when idle.
  if ( ! rfid.PICC_IsNewCardPresent())
    return;

  // Verify if the NUID has been readed
  if ( ! rfid.PICC_ReadCardSerial())
    return;

   if (rfid.uid.uidByte[0] == petnumber1[0] || 
    rfid.uid.uidByte[1] == petnumber1[1] || 
    rfid.uid.uidByte[2] == petnumber1[2] || 
    rfid.uid.uidByte[3] == petnumber1[3] ){
  
     Serial.print(F("penumber1 "));
      
    printHex(rfid.uid.uidByte, rfid.uid.size);
    Serial.println();
     digitalWrite(7,HIGH);
     delay(1000);
     digitalWrite(7,LOW);

    
  }

if (rfid.uid.uidByte[0] == petnumber2[0] || 
    rfid.uid.uidByte[1] == petnumber2[1] || 
    rfid.uid.uidByte[2] == petnumber2[2] || 
    rfid.uid.uidByte[3] == petnumber2[3] ){
  
   
     Serial.print(F("penumber2 "));
     
    
    printHex(rfid.uid.uidByte, rfid.uid.size);
    Serial.println();
     digitalWrite(3,HIGH);
    delay(1000);
     digitalWrite(3,LOW);
  } 
 
  else if (rfid.uid.uidByte[0] != petnumber1[0] &&
    rfid.uid.uidByte[1] != petnumber1[1]&&
    rfid.uid.uidByte[2] != petnumber1[2]&&
    rfid.uid.uidByte[3] != petnumber1[3]){
    y=1;
  }
 

  // Halt PICC
  rfid.PICC_HaltA();

  // Stop encryption on PCD
  rfid.PCD_StopCrypto1();
}




void printHex(byte *buffer, byte bufferSize) {
  for (byte i = 0; i < bufferSize; i++) {
    Serial.print(buffer[i] < 0x10 ? " 0" : " ");
    Serial.print(buffer[i], HEX);
  }
}